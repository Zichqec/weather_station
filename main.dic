// **** usage ****
//
// The function name is the same as the event name; there is no On_ prefix when getting a string, as in the SHIORI/3.0 template.
//
// If it returns a value, it will be executed as SakuraScript
// You can control the behavior by assigning the following variables.
// res_event
// res_event , res_reference[0]... [n].
// The specified event will be fired with reference. reference is optional.
//
// res_target
// Specifies to which ghost the script or event should be sent.
// Specify the Sakura name. Also, __SYSTEM_ALL_GHOST__ will notify all running ghosts.
// If omitted, it will be sent to the ghost that executed the plugin menu.
//
// res_marker
// You can specify the text to be displayed on the balloon's marker (the small status indicator at the bottom).
// res_event_option
// res_event_option / res_script_option
// Set the EventOption / ScriptOption header, respectively.
//
// See the plugin specification for details.
// http://emily.shillest.net/specwiki/index.php?PLUGIN%2F2.0%2F%E4%BB%95%E6%A7%98%E6%9B%B8


//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//============= USING THIS CODE IN YOUR OWN GHOST? READ BELOW =============
//Glad you find it interesting/useful! You are welcome to copy any of the code from the main.dic and envelopes.dic files and use it in your own ghosts. The other files come with YAYA as Plugin, so I can't speak for those.

//If you want to bundle the plugin with your ghost: that's perfectly fine, feel free to do so. Just note that it may become out of date over time.

//If you want to integrate this code into your ghost: that's also fine. Please credit me in your ghost's readme, with a link back to my site! https://ukagaka.zichqec.com/
//If you integrate the code into your own ghost, **PLEASE DO NOT USE MY API KEY**. I only get 1 million free API calls a month, so if you're putting it in something other than the plugin, I think it only makes sense to have your own key to spread out the load. You can get a completely free API key by signing up for Weather API here: https://www.weatherapi.com/

//Please DO NOT modify (or encourage users to modify) the API key in the original plugin. I do not allow modifications of the plugin itself to be distributed, nor do I want to abuse a service that I am making use of at no cost. My request that you get your own API key *only* applies if you are integrating the code into *your own ghost*, because that would make them two different "applications", so to say.

#define __API_KEY__ 08f40be4a6fb4edd9d361756211508

#define	C_BYTE1		CHR(0x1)

PluginLoad
{
	Info.update_available = 0
	
	Info.error_code = ""
	Info.error_message = ""
	Info.Send_Weather_Now = 0
	//TODO probably need the other variables here as well?
	foreach CurrentWeatherTags; _var
	{
		EVAL("Weather.%(REPLACE(_var,'-','_')) = ''")
	}
	OnGetCurrentWeather
	CheckForUpdates
}

OnTestThing
{
	"\![open,readme,Weather Station]"
	--
	OnMenuExec
}

PluginUnload
{
	Info.update_available = 0
	Info.Send_Weather_Now = 0
	ClearWeatherData
	ClearErrors
}

CheckForUpdates
{
	Info.update_available = 0
	_t = FUNCTIONEX("saori/httpc.dll","https://zichqec.github.io/s-the-skeleton/weatherregex")
	_ver = SPLIT(_t,"WEATHER_STATION_VER--")[1]
	_ver = SPLIT(_ver,"--WEATHER_STATION_VER")[0]
	if _ver != ""
	{
		if _ver != version_num; Info.update_available = 1
	}
	LOGGING(_ver)
	LOGGING(version_num)
}

ClearWeatherData
{
	 Info.Send_Weather_Now = 0
	
	_varlist = IARRAY
	_varlist ,= GETVARLIST("Weather.")
	_varlist ,= GETVARLIST("Forecast.")
	
	foreach _varlist; _var
	{
		ERASEVAR("%(_var)")
		
	}
}

ClearErrors
{
	ERASEVAR("Info.error_code")
	ERASEVAR("Info.error_message")
}

//Main plugin menu
OnMenuExec : all
{
	res_marker = version
	
	_location = "(Not set)"
	if UserInfo.location != ""; _location = UserInfo.location
	
	if !ISVAR("Settings.units"); Settings.units = "Imperial"
	if !ISVAR("Settings.date_format"); Settings.date_format = "YYYY-MM-DD"
	if !ISVAR("Settings.time_format"); Settings.time_format = "12"
	
	_metric = Settings.units == "Metric"

	if !ISVAR("Settings.weather_interval"); Settings.weather_interval = 60

	
	"\0\b2\_q\*\![set,autoscroll,disable]\![no-autopause]\f[anchorvisitedfontcolor,default.anchor]\![close,inputbox,OnWeatherLocation]"
	"\f[align,center]%(emdash) Weather Station %(emdash)\n\n[half]\f[align,default]"
	
	if Info.update_available; "\![*]\_a[OnWeatherStationUpdate]An update is available!\_a\n\n[half]"
	
	//"\q[Testvar,OnTestThing]"
	//"\n\q[Display All Vars,OnVarDisplay]\n\n"

	
	if HasWeatherData
	{
		"\![*]"
		if ARRAYSIZE(Weather.alerts) >= 1
		{
			"\_a[OnWeatherAlertMenu,0]Weather alerts\_a (%(ARRAYSIZE(Weather.alerts)))"
		}
		else
		{
			"\f[color,disable]Weather alerts (0)\f[color,default]"
		}
		"\n\![*]\__q[OnForecastMenu.Daily]Forecast\__q  \![*]\__q[OnAstronomyMenu]Astronomy\__q    %(MoonIcon)"
	}
	else //Error or no data
	{
		"\f[color,disable]\![*]"
		"Weather alerts (0)"
		"\n\![*]Forecast  \![*]Astronomy    %(MoonIcon)\f[color,default]"
	}
	
	
	if _location != "(Not set)"; "\n\![*]\__q[OnCurrentWeather_ForceUpdate]Refresh weather data\__q"
	
	//Last updated display
	if HasWeatherData || Info.error_code != ""
	{
		"\nLast updated \f[anchorstyle,none]%(h)"
		if _metric; "%(Info.last_update[0])"
		else; "%(Info.last_update[1])"
		":%(Info.last_update[2]) "
		if !_metric; "%(Info.last_update[4])" //am/pm
	}
	"%(d)\f[anchorstyle,default]\n[half]"
	"\n\![*]\__q[OnSettingsMenu]Settings\__q"
	"\n\n"

	if !(Info.error_code == "" || Info.error_code == "1003") //1003 is no location
	{
		"Error: %(Info.error_code)\n%(Info.error_message)\n\n"
	}
	elseif HasWeatherData
	{
		//Current weather display
		"\f[align,center]%(emdash) Current Weather %(emdash)\n \n[half]\f[align,left]\f[anchorstyle,none]"
		
		"%(h)%(Weather.condition)%(d)\n" //\_b[http:%(Weather.condition_icon)]
		
		if _metric; "Temperature: %(h)%(Weather.temp_c)°C%(d)\nFeels like: %(h)%(Weather.feelslike_c)°C%(d)\n"
		else; "Temperature: %(h)%(Weather.temp_f)°F%(d)\nFeels like: %(h)%(Weather.feelslike_f)°F%(d)\n"
		
		"Humidity: %(h)%(Weather.humidity)%%(d)\n"
		
		if _metric; "Wind speed: %(h)%(Weather.wind_kph) kph%(d), %(h)%(Weather.wind_dir)%(d) (%(h)%(Weather.wind_degree)°%(d))\n"
		else; "Wind speed: %(h)%(Weather.wind_mph)mph%(d), %(h)%(Weather.wind_dir)%(d) (%(h)%(Weather.wind_degree)°%(d))\n"
		
		if _metric; "Gusts: %(h)%(Weather.gust_kph) kph%(d)\n"
		else; "Gusts: %(h)%(Weather.gust_mph)mph%(d)\n"
		
		"Chance of rain: %(h)"; EVAL("Forecast.0.Day.daily_chance_of_rain") + "%"; "%(d)\n"
		"Chance of snow: %(h)"; EVAL("Forecast.0.Day.daily_chance_of_snow") + "%"; "%(d)\n"
		
		if _metric; "Precipitation: %(h)%(Weather.precip_mm) mm%(d)\n"
		else; "Precipitation: %(h)%(Weather.precip_in) inches%(d)\n"
		
		if _metric; "Visibility: %(h)%(Weather.vis_km) km%(d)\n"
		else; "Visibility: %(h)%(Weather.vis_miles) miles%(d)\n"
		
		"Cloud cover: %(h)%(Weather.cloud)%%(d)\n"
		
		"UV Index: %(h)%(Weather.uv)%(d)\n"
		
		if _metric; "Pressure: %(h)%(Weather.pressure_mb) mb%(d)\n"
		else; "Pressure: %(h)%(Weather.pressure_in) inches%(d)\n"
		
		//Air Quality Index
		_aq_items = ("co","o3","no2","so2","pm2_5","pm10")
		_co = ""
		_o3 = ""
		_no2 = ""
		_so2 = ""
		_pm2_5 = ""
		_pm10 = ""
		
		//This is for making the numbers short because dear god they are so many digits long???????
		foreach _aq_items; _item
		{
			void EVAL("_%(_item) = Weather.%(_item)")
		}
		
		"\nAir quality:\n\n[half]"
		"Carbon Monoxide: %(h)%(_co)%(d)\n"
		"Ozone: %(h)%(_o3)%(d)\n"
		"Nitrogen Dioxide: %(h)%(_no2)%(d)\n"
		"Sulphur Dioxide: %(h)%(_so2)%(d)\n"
		"PM2.5: %(h)%(_pm2_5)%(d)\n"
		"PM10: %(h)%(_pm10)%(d)\n"
		"US EPA standard: %(h)%(Weather.us_epa_index)%(d)\n"
		"UK Defra Index: %(h)%(Weather.gb_defra_index)%(d)\n"
		//"Pollen: " //no pollen for now :( if someone knows of a good (free) pollen API please tell me!!
	}
	elseif _location == "(Not set)"
	{
		"\![*]\_a[OnChangeLocation]Set a location\_a\n"
	}
	
	"\n\![*]\q[Close,OnCancel]\n\n"
	
	"\f[height,-2]\f[anchorstyle,default]\![*]Powered by \_a[https://www.weatherapi.com/]WeatherAPI.com\_a\e"
}

OnWeatherStationUpdate
{
	res_marker = version
	
	"\0\b2\_q\![set,autoscroll,disable]\![no-autopause]\f[anchorstyle,none]\f[anchorvisitedfontcolor,default.anchor]Weather Station will attempt to update. Most ghosts do not have dialogue for plugin updates; please run the plugin again once the update is complete.\n\nYou can also update manually by opening the Ghost Explorer with %(h)Ctrl + E%(d), changing the %(h)Type%(d) tab to %(h)Plugin%(d), and right clicking on %(h)Weather Station%(d). The %(h)Network Update%(d) option will update the plugin.\n\nThe latest version of Weather Station can always be downloaded from \_a[https://ukagaka.zichqec.com/]Zichqec's website\_a.\n\nClick to continue...\x\![updateother,--plugin=Weather Station]Updating...\e"
}

//Menu for location, units, and if you want to let ghosts see your location data
OnSettingsMenu : all
{
	res_marker = version
	
	_location = "(Not set)"
	if UserInfo.location != ""; _location = UserInfo.location
	
	"\0\*\_q\b2\![set,autoscroll,disable]\![no-autopause]\f[anchorvisitedfontcolor,default.anchor]\![close,inputbox,OnWeatherLocation]"
	"\f[align,center]%(emdash) Settings %(emdash)\n \f[align,default]\n"
	//"Send: %(Info.Send_Weather_Now)\n"
	"Location: \![*]\_a[OnChangeLocation]%(_location)\_a"

	if _location != "(Not set)"; " \__q[OnExpungeLocationData](Remove)\__q"
	"\n\n"
	"Units: \![*]\_a[OnUnitsToggle]%(Settings.units)\_a"
	"\n\n"
	"Date format: \![*]\_a[OnDateFormatToggle]%(Settings.date_format)\_a"
	"\n\n"
	"Time format: \![*]\_a[OnTimeFormatToggle]%(Settings.time_format) hour\_a"
	"\n"
	//"Update every \![*]\_a[OnWeatherInterval,%(Settings.weather_interval)]%(Settings.weather_interval)\_a  minutes\n"
	"\n\n\![*]\q[Back,OnMenuExec]"
}

OnTest_httpc
{
	_api = FUNCTIONEX("saori/httpc.dll","https://api.weatherapi.com/v1/current.xml?key=__API_KEY__&q=%(UserInfo.location_url)")
	_api
}

//If you want to see how much data this thing is actually dealing with... try this lol
OnVarDisplay
{
	_list = GETVARLIST("Forecast")
	
	_display = ""
	foreach _list; _item
	{
		_display += "%(_item): " + EVAL("%(_item)") + "\n"
	}
	"\![set,autoscroll,0]\f[anchorvisitedfontcolor,default.anchor]\b[2]\_q%(ARRAYSIZE(_list))\n\n%(_display)\x"
}

//Removes all of the user's location data completely
OnExpungeLocationData
{
	ClearWeatherData
	ClearErrors
	ERASEVAR("UserInfo.location")
	ERASEVAR("UserInfo.location_url")
	ERASEVAR("UserInfo.latitude")
	ERASEVAR("UserInfo.longitude")
	--
	"\![raiseplugin,Weather Station,OnSettingsMenu]"
}

OnUnitsToggle
{
	if Settings.units != "Metric"; Settings.units = "Metric"
	else; Settings.units = "Imperial"
	OnSettingsMenu
}

OnDateFormatToggle
{
	//I'm not keeping leading 0s on anything but YYYY-MM-DD, but... for the sake of not having changing width.......
	if Settings.date_format == "YYYY-MM-DD"; Settings.date_format = "MM-DD-YYYY"
	elseif Settings.date_format == "MM-DD-YYYY"; Settings.date_format = "DD-MM-YYYY"
	else; Settings.date_format = "YYYY-MM-DD"
	OnSettingsMenu
}

OnTimeFormatToggle
{
	if Settings.time_format != "24"; Settings.time_format = "24"
	else; Settings.time_format = "12"
	OnSettingsMenu
}

//Change how often the weather auto-updates - removed this option because I'm pretty sure the API only updates every 15 minutes or so, and I am also worried about API calls...
OnWeatherInterval
{
	_interval = 60

	if reference[0] == "60"; _interval = 30
	elseif reference[0] == "30"; _interval = 15
	elseif reference[0] == "15"; _interval = 10
	//If it's 10/none of those, make it 60

	Settings.weather_interval = _interval
	OnSettingsMenu
}

//Weather check from the plugin's menu, activated by user
OnCurrentWeather_ForceUpdate
{
	OnGetCurrentWeather
	--
	//"\C\_w[1]"

	"\![raiseplugin,Weather Station,OnMenuExec]"
}

//Maximum number of days in the forecast, counting from 0. So this is 3 days, since that is what the free API allows.
#define MAXDAY 2

//Daily forecast menu, lets the user go back and forth between days and also switch to the hourly menu
OnForecastMenu.Daily : all
{
	res_marker = version
	_day = reference[0]
	if _day == ""; _day = 0
	_metric = Settings.units == "Metric"
	
	//Making a nice date display
	_YMD = EVAL("Forecast.%(_day).Day.date")
	
	_DMY = DMY(_YMD)
	_MDY = MDY(_YMD)
	
	"\0\b2\_q\*\![set,autoscroll,disable]\![no-autopause]\f[anchorvisitedfontcolor,default.anchor]"
	("\q[<<,OnPreviousForecastDay,%(_day)]","\f[color,disable]<<\f[color,default]")[_day <= 0]
	
	"%(newline)\f[align,center]"
	
	if Settings.date_format == "MM-DD-YYYY"; _MDY
	elseif Settings.date_format == "DD-MM-YYYY"; _DMY
	else; _YMD
	
	"%(newline)\f[align,right]"
	
	("\q[>>,OnNextForecastDay,%(_day)]","\f[color,disable]>>\f[color,default]")[_day >= MAXDAY]
	
	"\n \n\f[align,default]\f[anchorstyle,none]"
	
	//These EVALS are using a sort of pseudo ternary operator, to try and make things a bit cleaner. Need EVAL here so that I don't have to write all those var names manually for each forecast day...
	"Max temp: %(h)"; EVAL(("Forecast.%(_day).Day.maxtemp_f + '°F'","Forecast.%(_day).Day.maxtemp_c + '°C'")[_metric]); "%(d)\n"
	"Min temp: %(h)"; EVAL(("Forecast.%(_day).Day.mintemp_f + '°F'","Forecast.%(_day).Day.mintemp_c + '°C'")[_metric]); "%(d)\n"
	"Average temp: %(h)"; EVAL(("Forecast.%(_day).Day.avgtemp_f + '°F'","Forecast.%(_day).Day.avgtemp_c + '°C'")[_metric]); "%(d)\n"
	"Average humidity: %(h)"; EVAL("Forecast.%(_day).Day.avghumidity") + "%"; "%(d)\n"
	"Max wind speed: %(h)"; EVAL(("Forecast.%(_day).Day.maxwind_mph + 'mph'","Forecast.%(_day).Day.maxwind_kph + ' kph'")[_metric]); "%(d)\n"
	"\n"
	"Total precipitation: %(h)"; EVAL(("Forecast.%(_day).Day.totalprecip_in + ' inches'","Forecast.%(_day).Day.totalprecip_mm + ' mm'")[_metric]); "%(d)\n"
	"Chance of rain: %(h)"; EVAL("Forecast.%(_day).Day.daily_chance_of_rain") + "%"; "%(d)\n"
	"Chance of snow: %(h)"; EVAL("Forecast.%(_day).Day.daily_chance_of_snow") + "%"; "%(d)\n"
	"Average Visibility: %(h)"; EVAL(("Forecast.%(_day).Day.avgvis_miles + ' miles'","Forecast.%(_day).Day.avgvis_km + ' km'")[_metric]); "%(d)\n\n"
	
	//Astronomy info display, handled below
	AstronomyDisplay(_day)
	
	
	"\n\n\![*]\q[Hourly forecast,OnForecastMenu.Hourly,%(reference[0])]"
	"\n\![*]\q[Back,OnMenuExec]\e"
}

OnPreviousForecastDay
{
	reference[0]--; if reference[0] < 0; reference[0] = 0
	"\![raiseplugin,Weather Station,OnForecastMenu.Daily,%(reference[0])]"
}

OnNextForecastDay
{
	reference[0]++; if reference[0] > MAXDAY; reference[0] = MAXDAY
	"\![raiseplugin,Weather Station,OnForecastMenu.Daily,%(reference[0])]"
}

//Similar to the above, but handling the hour-by-hour.
OnForecastMenu.Hourly : all
{
	res_marker = version
	
	_day = reference[0]
	if _day == ""; _day = 0
	
	_hour = reference[1]
	if _hour == ""; _hour = 0
	
	_metric = Settings.units == "Metric"
	
	//Setting all the variables beforehand this time since there are so dang many
	_i = 0
	foreach ForecastHourTags; _tag
	{
		EVAL("_%(_tag) = Forecast.%(_day).Hour.%(_hour)[%(_i)]")
	}
	
	//Making a nice time and date display
	_YMD = _time[0," "]
	_24h = TOINT(_time[1," "][0,":"])
	
	_DMY = DMY(_YMD)
	_MDY = MDY(_YMD)
	
	_12h = ""
	_ap = "AM"
	if _24h >= 12; {_12h = _24h - 12; _ap = "PM"}
	else; {_12h = _24h; _ap = "AM"}
	
	if _12h == 0; _12h = 12
	
	"\0\b2\_q\*\![set,autoscroll,disable]\![no-autopause]\f[anchorvisitedfontcolor,default.anchor]"
	switch _hour <= 0 && _day <= 0
	{
		"\q[<<,OnPreviousForecastHour,%(_day),%(_hour)]"
		"\f[color,disable]<<\f[color,default]"
	}
	
	"%(newline)\f[align,center]"
	
	if Settings.date_format == "MM-DD-YYYY"; _MDY
	elseif Settings.date_format == "DD-MM-YYYY"; _DMY
	else; _YMD
	
	Settings.time_format == "24"; "%(_24h):00"
	else; "%(_12h) %(_ap)"
	
	"%(newline)\f[align,right]"
	
	switch _hour >= 23 && _day >= MAXDAY
	{
		"\q[>>,OnNextForecastHour,%(_day),%(_hour)]"
		"\f[color,disable]>>\f[color,default]"
	}
	
	"\n \n\f[align,default]\f[anchorstyle,none]"
	
	
	("Nighttime","Daytime")[TOINT(_is_day)]
	"\n"
	"Temperature: %(h)"; (_temp_f + "°F",_temp_c + "°C")[_metric]; "%(d)\n"
	"Feels like: %(h)"; (_feelslike_f + "°F",_feelslike_c + "°C")[_metric]; "%(d)\n"
	"Humidity: %(h)%(_humidity)%%(d)\n"
	"Wind speed: %(h)"; (_wind_mph + "mph",_wind_kph + " kph")[_metric]; "%(d), %(h)%(_wind_dir)%(d) (%(h)%(_degree)°%(d))\n"
	"Gusts: %(h)"; (_gust_mph + "mph",_gust_kph + " kph")[_metric]; "%(d)\n"
	"Precipitation: %(h)"; (_precip_in + " inches",_precip_mm + " mm")[_metric]; "%(d)\n"
	"Cloud cover: %(h)%(_cloud)%%(d)\n"
	"Chance of rain: %(h)%(_chance_of_rain)%%(d)\n"
	"Chance of snow: %(h)%(_chance_of_snow)%%(d)\n"
	"Visibility: %(h)"; (_vis_miles + " miles",_vis_km + " km")[_metric]; "%(d)\n"
	"Wind chill: %(h)"; (_windchill_f + "°F",_windchill_c + "°C")[_metric]; "%(d)\n"
	"Heat index: %(h)"; (_heatindex_f + "°F",_heatindex_c + "°C")[_metric]; "%(d)\n"
	"Dew point: %(h)"; (_dewpoint_f + "°F",_dewpoint_c + "°C")[_metric]; "%(d)\n"
	"Pressure: %(h)"; (_pressure_in + " inches",_pressure_mb + " mb")[_metric]; "%(d)\n"
	"UV Index: %(h)%(_uv)%(d)\n"
	
	"\n\n\![*]\q[Daily forecast,OnForecastMenu.Daily,%(reference[0])]"
	"\n\![*]\q[Back,OnMenuExec]\e"
}

OnPreviousForecastHour
{
	reference[1]--
	if reference[1] < 0
	{
		if reference[0] <= 0; reference[1] = 0
		else; {reference[0]--; reference[1] = 23}
	}
	"\![raiseplugin,Weather Station,OnForecastMenu.Hourly,%(reference[0]),%(reference[1])]"
}

OnNextForecastHour
{
	reference[1]++
	if reference[1] > 23
	{
		if reference[0] >= MAXDAY; reference[1] = 23
		else; {reference[0]++; reference[1] = 0}
	}
	"\![raiseplugin,Weather Station,OnForecastMenu.Hourly,%(reference[0]),%(reference[1])]"
}

//Display astronomy data. Astronomy data isn't sent with both 24hr and 12hr time, so have to do some conversions
AstronomyDisplay : all
{
	_time24 = Settings.time_format == "24"
	_day = _argv[0]
	
	_sunrise_12 = EVAL("Forecast.%(_day).Astro.sunrise")
	_sunrise_24 = Twelve_to_24(_sunrise_12)
	if _sunrise_12 == "No sunrise"; _sunrise_24 = _sunrise_12 //If there is no sunrise, make sure it says that for the metric version too | MIGHT BE ABLE TO GET RID OF THIS NOW, IDK AND I CAN'T TEST UNTIL THIS COMES AROUND AGAIN
	else
	{
		//if TOINT(_sunrise_12[0,":"]) < 10; _sunrise_12 = TOINT(_sunrise_12[0,":"]) + ":" + _sunrise_12[1,":"] //If there is a leading 0, get rid of it ← what the hell is this BS
		
		if TOINT(_sunrise_12[0,":"]) < 10; _sunrise_12 = ERASE(_sunrise_12,0,1) //If there is a leading 0, get rid of it
	}
	"Sunrise: %(h)"; (_sunrise_12,_sunrise_24)[_time24]; "%(d)\n"
	
	_sunset_12 = EVAL("Forecast.%(_day).Astro.sunset")
	_sunset_24 = Twelve_to_24(_sunset_12)
	if _sunset_12 == "No sunset"; _sunset_24 = _sunset_12
	else
	{
		if TOINT(_sunset_12[0,":"]) < 10; _sunset_12 = ERASE(_sunset_12,0,1)
	}
	"Sunset: %(h)"; (_sunset_12,_sunset_24)[_time24]; "%(d)\n\n"
	
	_moonrise_12 = EVAL("Forecast.%(_day).Astro.moonrise")
	_moonrise_24 = Twelve_to_24(_moonrise_12)
	if _moonrise_12 == "No moonrise"; _moonrise_24 = _moonrise_12
	else
	{
		if TOINT(_moonrise_12[0,":"]) < 10; _moonrise_12 = ERASE(_moonrise_12,0,1)
	}
	"Moonrise: %(h)"; (_moonrise_12,_moonrise_24)[_time24]; "%(d)\n"
	
	_moonset_12 = EVAL("Forecast.%(_day).Astro.moonset")
	_moonset_24 = Twelve_to_24(_moonset_12)
	if _moonset_12 == "No moonset"; _moonset_24 = _moonset_12
	else
	{
		if TOINT(_moonset_12[0,":"]) < 10; _moonset_12 = ERASE(_moonset_12,0,1)
	}
	"Moonset: %(h)"; (_moonset_12,_moonset_24)[_time24]; "%(d)\n\n"
	
	"Moon phase: %(h)"; EVAL("Forecast.%(_day).Astro.moon_phase"); "%(d) \n"
	"Illumination: %(h)"; EVAL("Forecast.%(_day).Astro.moon_illumination"); "%%(d)    \_b[img/moon_0%(PhaseNum(_day)),inline,--option=use_self_alpha]\n"
}

//Convert 12hr to 24hr
Twelve_to_24
{
	if "No" _in_ _argv[0]; {_argv[0]; return}
	
	_orig = _argv[0]
	_hours = TOINT(_orig[0,":"])
	_minutes = TOINT(_orig[1,":"][0," "])
	_ap = TOUPPER(_orig[1," "])
	
	if _ap == "PM"
	{
		if _hours != 12; _hours += 12
	}
	if _hours < 10; _hours = "0" + TOSTR(_hours)
	if _minutes < 10; _minutes = "0" + TOSTR(_minutes)
	
	"%(_hours):%(_minutes)"
}

//Convert 24hr to 12hr
TwentyFour_to_12
{
	_orig = _argv[0]
	_hours = TOINT(_orig[0,":"])
	_minutes = TOINT(_orig[1,":"])
	_ap = "AM"
	
	if _hours >= 12
	{
		_hours -= 12
		_ap = "PM"
	}
	if _hours == 0; _hours = 12
	if _minutes < 10; _minutes = "0" + TOSTR(_minutes)
	
	"%(_hours):%(_minutes) %(_ap)"
}

//Astronomy menu display
OnAstronomyMenu : all
{
	res_marker = version
	
	"\0\b2\*\![set,autoscroll,disable]\![no-autopause]\_q\f[anchorstyle,none]\f[anchorvisitedfontcolor,default.anchor]"
	"\f[align,center]%(emdash) Astronomy %(emdash)\n \f[align,default]\n"
	AstronomyDisplay(0)
	"\n\n\![*]\q[Back,OnMenuExec]"
}

//Weather alert display. Yes, I am aware that the descriptions have missing spaces for some reason. I can't figure out why that is. The API shows the spaces just fine online, but the result from the SAORI has the missing spaces before I even touch it.
//I will also note that when I use the SAORI to request info from the API, categories without info have both a close and ending tag, like <severity></severity>, whereas in the online version it shows <severity/>. Weird.
OnWeatherAlertMenu : all
{
	_alert = reference[0]
	_info = SPLIT(Weather.alerts[_alert],C_BYTE1)
	res_marker = version
	
	"\0\b2\*\![set,autoscroll,disable]\![no-autopause]\_q\f[anchorstyle,none]\f[anchorvisitedfontcolor,default.anchor]"
	
	("\q[<<,OnPreviousAlert,%(_alert)]","\f[color,disable]<<\f[color,default]")[_alert <= 0]
	
	"%(newline)\f[align,center]"
	
	"(%(_alert + 1)/%(ARRAYSIZE(Weather.alerts)))"
	
	"%(newline)\f[align,right]"
	
	("\q[>>,OnNextAlert,%(_alert)]","\f[color,disable]>>\f[color,default]")[_alert >= (ARRAYSIZE(Weather.alerts) - 1)]
	
	"\n \n\f[align,default]"
	
	//Love the all modifier, imagine just being able to put a loop and not needing a display variable. Anywho this displays all the info from the alerts that is not blank, with an extra bit to make the date and time displays a bit easier to read
	_i = 0
	foreach AlertTags; _tag
	{
		_inf = _info[_i]
		if _tag == "effective" || _tag == "expires"
		{
			_inf = REPLACE(_inf,"T"," ")
		}
		
		if _inf != ""; "%(Capitalize(_tag)): %(h)%(_inf)%(d)\n"
		_i++
	}
	
	"\n\n\![*]\q[Back,OnMenuExec]"
}

OnPreviousAlert
{
	reference[0]--
	if reference[0] < 0; reference[0] = 0

	"\![raiseplugin,Weather Station,OnWeatherAlertMenu,%(reference[0])]"
}

OnNextAlert
{
	reference[0]++
	if reference[0] >= (ARRAYSIZE(Weather.alerts) - 1); reference[0] = (ARRAYSIZE(Weather.alerts) - 1)

	"\![raiseplugin,Weather Station,OnWeatherAlertMenu,%(reference[0])]"
}

OnGetCurrentWeather //Can apparently also run this without arguments to test if an internet connection is available. Very useful! ...If I'm moving my website, I need to keep this in mind... | I think this note was for the httpc saori...
{
	_location = "(Not set)"
	if UserInfo.location != ""; _location = UserInfo.location
	if _location == "(Not set)"; return
	
	//Request info from the API
	Info.error_code = ""
	Info.error_message = ""
	_api = FUNCTIONEX("saori/httpc.dll","http://api.weatherapi.com/v1/forecast.xml?key=__API_KEY__&q=%(UserInfo.location_url)&aqi=yes&days=3&alerts=yes")
	
	//Update the last updated time
	Info.last_update[0] = hour
	Info.last_update[1] = nowhour
	Info.last_update[2] = nowmin
	Info.last_update[3] = nowsec
	if ampm == 1; Info.last_update[4] = "pm"
	else; Info.last_update[4] = "am"
	Info.last_update[5] = GETSECCOUNT
	
	if "<error>" _in_ _api //If there's an error, let the user know and clear the weather info
	{
		Info.error_code = TOSTR(ExtractXML(_api,"code"))
		Info.error_message = ExtractXML(_api,"message")
		ClearWeatherData
		CheckForUpdates //If there's an error, check for an update because an update might fix it...
	}
	elseif _api == ""
	{
		Info.error_code = "99999"
		Info.error_message = "No API response"
		ClearWeatherData
		// _internetcheck = FUNCTIONEX("saori/httpc.dll")
		// LOGGING("====================================================================")
		// LOGGING("_internetcheck: %(_internetcheck)")
		CheckForUpdates //If there's an error, check for an update because an update might fix it...
	}
	else
	{
		//Extracting info from the XML file the API sent. ExtractXML here pulls out the data from between the XML tags so that we can get what we need. Starts by breaking it into big chunks, then looping through lists of tags and pulling out the info between each one.
		//The EVAL tags here are mostly to help with the forecast days, where there are 72 arrays to deal with. Basically it can make variables on the fly, using the numbers for the day and hour to give them the proper names
		
		//================ CURRENT WEATHER ================
		_current = ExtractXML(_api,"current")
		
		foreach CurrentWeatherTags; _tag
		{

			EVAL("Weather.%(REPLACE(_tag,'-','_')) = '%(TOSTR(ExtractXML(_current,_tag)))'")
		}
		
		//Doing condition separately since it has subcategories
		_condition = ExtractXML(_current,"condition")

		Weather.condition = ExtractXML(_condition,"text")
		Weather.condition_icon = ExtractXML(_condition,"icon")
		Weather.condition_code = ExtractXML(_condition,"code")
		
		//================ FORECAST ================

		_forecastdays = ExtractXML(_api,"forecastday")
		
		//Loop for each of the 3 days of forecast data
		for _i = 0; _i < 3; _i++
		{
			//These two are on their own above the rest of the forecast data
			EVAL("Forecast.%(_i).Day.date = '%(ExtractXML(_forecastdays[_i],'date'))'")
			EVAL("Forecast.%(_i).Day.date_epoch = '%(ExtractXML(_forecastdays[_i],'date_epoch'))'")
			
			//----------- Day -----------
			_day = ExtractXML(_forecastdays[_i],"day")
			
			foreach ForecastDayTags; _tag
			{
				EVAL("Forecast.%(_i).Day.%(REPLACE(_tag,'-','_')) = '%(TOSTR(ExtractXML(_day,_tag)))'")
			}
			
			//----------- Astro -----------
			
			_astro = ExtractXML(_forecastdays[_i],"astro")
			
			foreach ForecastAstroTags; _tag
			{
				EVAL("Forecast.%(_i).Astro.%(REPLACE(_tag,'-','_')) = '%(TOSTR(ExtractXML(_astro,_tag)))'")
			}
			
			//----------- Hour -----------
			
			_hours = ExtractXML(_forecastdays[_i],"hour")
			
			//Loop for each of the 24 hours in each day
			_ii = 0
			foreach _hours; _hour
			{
				EVAL("Forecast.%(_i).Hour.%(_ii) = IARRAY")
				_temp = IARRAY
				foreach ForecastHourTags; _tag
				{
					EVAL("_temp ,= '%(TOSTR(ExtractXML(_hour,_tag)))'")
				}
				EVAL("Forecast.%(_i).Hour.%(_ii) = '%(_temp)'")
				_ii++
			}
		}
		
		//================ ALERTS ================
		
		Weather.alerts = IARRAY
		if "<alert>" _in_ _api
		{
			_alerts = ExtractXML(_api,"alert")
			
			foreach _alerts; _alert
			{
				LOGGING("ALERT %(_alert)")
				_temp = ""
				foreach AlertTags; _tag
				{
					//LOGGING("TAG %(_TAG)") //lol this is written with the wrong var name anyways
					_getinfo = ExtractXML(_alert,_tag)
					if _temp != ""; _temp += C_BYTE1
					//EVAL("_temp += '%(_getinfo)'") //Having this here makes it break if there's a ' in the name..... but apparently I don't need this EVAL? Idk
					_temp += _getinfo
				}
				Weather.alerts ,= _temp
				
			}
		}
	}
	Info.Send_Weather_Now = 1 //Makes OnSecondChange send the weather data since it's a bit wonky if you just go straight to it
}

//For ghosts to request the current weather if they don't have it for some reason
OnWeatherStation.Weather
{
	if Info.error_code != ""; {OnWeatherStation.Error; return}
	elseif !CanGetWeather; {OnWeatherStation.Error("no_location"); return}
	
	//res_event_option = "notify"

	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Weather" //Calls this event in the ghost if it exists
	//res_marker = version //Send the little text on the bottom of the balloon that says it's from this plugin
	
	res_reference[0] = Weather.condition
	res_reference[1] = Weather.condition_icon
	res_reference[2] = Weather.condition_code
	res_reference[3] = Weather.is_day
	res_reference[4] = Weather.temp_f
	res_reference[5] = Weather.temp_c
	res_reference[6] = Weather.feelslike_f
	res_reference[7] = Weather.feelslike_c
	res_reference[8] = Weather.humidity
	res_reference[9] = Weather.wind_mph
	res_reference[10] = Weather.wind_kph
	res_reference[11] = Weather.wind_dir
	res_reference[12] = Weather.wind_degree
	res_reference[13] = Weather.gust_mph
	res_reference[14] = Weather.gust_kph
	res_reference[15] = Weather.precip_in
	res_reference[16] = Weather.precip_mm
	res_reference[17] = Weather.cloud
	//Yes, these are the same as you can get from the forecast, but I figure this will be easier for people
	res_reference[18] = Forecast.0.Day.daily_will_it_rain
	res_reference[19] = Forecast.0.Day.daily_chance_of_rain
	res_reference[20] = Forecast.0.Day.daily_will_it_snow
	res_reference[21] = Forecast.0.Day.daily_chance_of_snow
	
	res_reference[22] = Weather.vis_miles
	res_reference[23] = Weather.vis_km
	res_reference[24] = Weather.pressure_in
	res_reference[25] = Weather.pressure_mb
	res_reference[26] = Weather.uv
	
	//Air quality
	res_reference[27] = Weather.co
	res_reference[28] = Weather.no2
	res_reference[29] = Weather.o3
	res_reference[30] = Weather.so2
	res_reference[31] = Weather.pm2_5
	res_reference[32] = Weather.pm10
	res_reference[33] = Weather.us_epa_index //_ not - here
	res_reference[34] = Weather.gb_defra_index
	
	res_reference[35] = Settings.units
	res_reference[36] = Info.last_update[5]
	res_reference[37] = version_num
	//res_reference[36] = Settings.weather_interval //Currently not in use
	
	//38-41 USED to contain the user's location data IF that setting was toggled on. I've removed it due to privacy concerns, I just don't think there is a good reason to share this data with a ghost
	//I may leave a space here if I add future arguments, or I may not... hm
}

//For ghosts requesting the current astronomy data
//reference0 is the current day
OnWeatherStation.Astro
{
	if Info.error_code != ""; {OnWeatherStation.Error; return}
	elseif !CanGetWeather; {OnWeatherStation.Error("no_location"); return}
	
	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Astro"
	
	if !(reference[0] == "0" || reference[0] == "1" || reference[0] == "2"); reference[0] = "0" //If no valid day is specified, use today
	
	res_reference[0] = reference[0]
	
	_sunrise = EVAL("%(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.sunrise)%(CHR(34))")
	_sunset = EVAL("%(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.sunset)%(CHR(34))")
	_moonrise = EVAL("%(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.moonrise)%(CHR(34))")
	_moonset = EVAL("%(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.moonset)%(CHR(34))")
	
	res_reference[1] = _sunrise
	res_reference[2] = _sunset
	res_reference[3] = _moonrise
	res_reference[4] = _moonset
	
	res_reference[5] = Twelve_to_24(_sunrise)
	res_reference[6] = Twelve_to_24(_sunset)
	res_reference[7] = Twelve_to_24(_moonrise)
	res_reference[8] = Twelve_to_24(_moonset)
	
	EVAL("res_reference[9] = %(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.moon_phase)%(CHR(34))")
	res_reference[10] = PhaseNum
	EVAL("res_reference[11] = %(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Astro.moon_illumination)%(CHR(34))")
}

//For ghosts requesting the current daily forecast data
//reference0 is the current day
OnWeatherStation.Forecast.Day
{
	if Info.error_code != ""; {OnWeatherStation.Error; return}
	elseif !CanGetWeather; {OnWeatherStation.Error("no_location"); return}
	
	if !(reference[0] == "0" || reference[0] == "1" || reference[0] == "2"); reference[0] = "0" //If no valid day is specified, use today
	
	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Forecast.Day"
	
	res_reference[0] = reference[0]
	
	_ref = 1
	for _i = 0; _i < ARRAYSIZE(ForecastDayTags); _i++
	{
		_tag = ForecastDayTags[_i]
		EVAL("res_reference[%(_ref)] = %(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Day.%(_tag))%(CHR(34))")
		_ref++
	}
}

//For ghosts requesting the current hourly forecast data
//reference0 is the current day
OnWeatherStation.Forecast.Hourly
{
	if Info.error_code != ""; {OnWeatherStation.Error; return}
	elseif !CanGetWeather; {OnWeatherStation.Error("no_location"); return}
	
	if !(reference[0] == "0" || reference[0] == "1" || reference[0] == "2"); reference[0] = "0" //If no valid day is specified, use today
	
	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Forecast.Hourly"
	
	_ref = 0
	for _i = 0; _i < 24; _i++
	{
		EVAL("res_reference[%(_ref)] = %(CHR(34))%(CHR(37))(Forecast.%(reference[0]).Hour.%(_i))%(CHR(34))")
		_ref++
	}
	
	res_reference[24] = reference[0]
}

//For ghosts requesting the current weather alerts
//This is its own function purely because it needed to be a 2d array, and there are commas in the descriptions... Sorry AYA users, please upgrade to YAYA
OnWeatherStation.Alerts
{
	if Info.error_code != ""; {OnWeatherStation.Error; return}
	elseif !CanGetWeather; {OnWeatherStation.Error("no_location"); return}
	
	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Alerts"
	
	
	for _i = 0; _i < ARRAYSIZE(Weather.alerts); _i++
	{
		EVAL("res_reference[%(_i)] = Weather.alerts[%(_i)]")
	}
}

OnWeatherStation.Error
{
	res_target = "__SYSTEM_ALL_GHOST__" //Sends this to all open ghosts
	res_event = "OnWeatherStation.Error"
	
	_short = ""
	_msg = Info.error_message
	_code = Info.error_code
	
	
	if Info.error_code == "1003"; _short = "no_location"
	elseif Info.error_code == "1006"; _short = "location_invalid"
	elseif Info.error_code == "2007"; _short = "api_quota_exceeded"
	elseif Info.error_code == "2008"; _short = "api_key_disabled"
	elseif Info.error_code == "9999"; _short = "api_internal_error"
	elseif Info.error_code == "99999"; _short = "no_api_response"
	else; _short = "other"
	
	if _argv[0] == "no_location"
	{
		_short = _argv[0]
		_msg = "No matching location found."
		_code = "1006"
	}
	
	res_reference[0] = _short
	res_reference[1] = _msg
	res_reference[2] = _code
	
	res_reference[3] = Info.last_update[5]
	res_reference[4] = version_num
	res_reference[5] = Info.update_available
}

//Changing locations
OnChangeLocation
{
	res_marker = version
	"\![quicksection,true]\*\![open,inputbox,OnWeatherLocation,-1]\![no-autopause]"
	--
	"Write the name or latitude and longitude of your city to search for it. If in the US, you can use a zip code. If in the UK, you can use a postcode. If in Canada, you can use a postal code.\n\n\![*]\q[Back,OnSettingsMenu]\e"
}

//Parse the location stuff sent back by the API, call OnChangeLocation again if there were no results
OnWeatherLocation
{
	res_marker = version
	_api = FUNCTIONEX("saori/httpc.dll","https://api.weatherapi.com/v1/search.xml?key=__API_KEY__&q=%(reference[0])")
	_display = ""
	_results = ExtractXML(_api,"geo")
	
	if "geo" !_in_ _api
	{
		"\![quicksection,true]No results, please try again.\n\n"
		--
		OnChangeLocation
	}
	else
	{
		//Loop through all the results and make a nice list
		foreach _results; _location
		{
			_name = ExtractXML(_location,"name") + ", " + ExtractXML(_location,"region") + ", " + ExtractXML(_location,"country")
			_url = ExtractXML(_location,"url")
			_lat = ExtractXML(_location,"lat")
			_lon = ExtractXML(_location,"lon")

			if _name == "" || _url == ""; continue

			_nocomma = REPLACE(_name,",","|-|") //changed these to C_BYTE1, hope they didn't break | update yes they did break I think because something something auto type convert lol

			_display += "\![*]\__q[OnWeatherLocationChosen,%(_url),%(_nocomma), %(_lat), %(_lon)]%(_name)\__q\n\n[half]" //There are spaces here to ensure these are transferred as strings and not ints
		}
		
		"\*\_q\b2\![set,autoscroll,disable]\![no-autopause]\f[anchorvisitedfontcolor,default.anchor]"
		--
		"\![*]\q[Back,OnSettingsMenu]\n\n"
		--
		"%(_display)"
		--
		"\n\n\![*]\q[Back,OnSettingsMenu]\e"
	}
}

//Set the location data once chosen and go back to the menu
OnWeatherLocationChosen
{
	UserInfo.location_url = reference[0]
	UserInfo.location = REPLACE(reference[1],"|-|",",")
	UserInfo.latitude = CUTSPACE(reference[2])
	UserInfo.longitude = CUTSPACE(reference[3])
	OnGetCurrentWeather //notifying everyone right now... not good | No this is good, everyone needs the updated info
	OnMenuExec
}

OnCancel
{
	"\0\b[-1]\e"
}

OnGhostBoot
{
	OnGetCurrentWeather
}

OnSecondChange
{
	if Info.Send_Weather_Now
	{
		Info.Send_Weather_Now = 0
		OnWeatherStation.Weather
		//No point sending anything but this one since it would only send one day of forecast anyhow...
	}
	elseif second == 0 && minute % Settings.weather_interval == 0
	{
		OnGetCurrentWeather
	}
}